trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Push to Docker Hub
  jobs:
  - job: Build_Web
    displayName: Build and Push Web
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:web -f ./SWARM/web/Dockerfile ./
        displayName: Build
      - script: /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:web
        displayName: Push  
  
  - job: Build_MySQL_API
    displayName: Build and Push MySQL_API
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:mysql_api -f ./SWARM/mysql_api/Dockerfile ./
        displayName: Build
      - script: /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:mysql_api
        displayName: Push

  - job: Build_Web_k8s
    displayName: Build and Push Web k8s
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:web_k8s -f ./k8s/web/Dockerfile ./
        displayName: Build
      - script: /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:web_k8s
        displayName: Push  
  
  - job: Build_MySQL_API_k8s
    displayName: Build and Push MySQL_API k8s
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:mysql_api_k8s -f ./k8s/mysql_api/Dockerfile ./
        displayName: Build
      - script: /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:mysql_api_k8s
        displayName: Push

  - job: Build_IoT_API_k8s
    displayName: Build and Push IoT_API k8s
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:iot_api_k8s -f ./k8s/iot_api/Dockerfile ./ && /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:iot_api_k8s
        displayName: Build
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:iot_api_k8s -f ./k8s/iot_api/Dockerfile ./ && /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:iot_api_k8s
        displayName: Push
  
  - job: Build_MySQL_DB
    displayName: Build and Push MySQL_DB
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:mysql_db ./MySQL_DB 
        displayName: Build
      - script: /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:mysql_db
        displayName: Push
  
  - job: Build_IoT_DB
    displayName: Build and Push IoT_DB
    pool:
      vmImage: ubuntu-latest
    steps:  
      - script: /usr/bin/docker build --pull -t micmunger/8cld202:iot_db ./IoT_DB 
        displayName: Build
      - script: /usr/bin/docker login -u $(username) -p $(password) docker.io && /usr/bin/docker push micmunger/8cld202:iot_db
        displayName: Push

- stage: Start
  displayName: Start Azure VMs
  jobs:
  - job: Start_Master
    displayName: Start Master-MySQL
    pool:
      vmImage: ubuntu-latest
    steps:      
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: 'Azure subscription 1(1aab54f1-babe-4322-95b4-185df45b9d75)'
        ScriptType: 'InlineScript'
        Inline: 'Start-AzVM -ResourceGroupName CLD202 -Name Master-MySQL'
        azurePowerShellVersion: 'LatestVersion'
  
  - job: Start_Worker
    displayName: Start Worker-IoT
    pool:
      vmImage: ubuntu-latest
    steps:      
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: 'Azure subscription 1(1aab54f1-babe-4322-95b4-185df45b9d75)'
        ScriptType: 'InlineScript'
        Inline: 'Start-AzVM -ResourceGroupName CLD202 -Name Worker-IoT'
        azurePowerShellVersion: 'LatestVersion'

- stage: Docker
  displayName: Deploy with Docker Swarm
  jobs:
  - deployment: masterSwarmInit
    displayName: Swarm init on Master
    pool:
      vmImage: 'ubuntu-latest'
    environment: 
      name: Azure Swarm
      resourceType: VirtualMachine
      tags: master
    strategy:
      runOnce:
        deploy:   
            steps:
            - bash:
                if [ $( /usr/bin/docker info --format '{{.Swarm.LocalNodeState}}' ) != 'active' ]; then
                  /usr/bin/docker swarm init --advertise-addr 4.205.16.41;
                fi;
              name: conditionnalSwarmInit
            - bash: echo "##vso[task.setvariable variable=token;isOutput=true]$( /usr/bin/docker swarm join-token -q worker )"
              name: setOutputStep

  - deployment: workerSwarmInit
    displayName: Swarm join on Worker
    dependsOn: masterSwarmInit
    variables:
            #$[dependencies.<job-name>.outputs['<lifecycle-hookname>_<resource-name>.<step-name>.<variable-name>']]
      token: $[ dependencies.masterSwarm.outputs['Deploy_Master-MySQL.setOutputStep.token'] ]
    environment: 
      name: Azure Swarm
      resourceType: VirtualMachine
      tags: worker
    strategy:
      runOnce:
        deploy:   
            steps:
            - script: "echo $(token)"
              name: echoToken
            - bash:
                if [ $( /usr/bin/docker info --format '{{.Swarm.LocalNodeState}}' ) != 'active' ]; then
                /usr/bin/docker swarm join --token $(token)  4.205.16.41:2377;
                fi;
              name: conditionnalSwarmJoin

  - deployment: masterSwarmStart
    displayName: Master Swarm Services Start
    dependsOn: workerSwarmInit
    pool:
      vmImage: 'ubuntu-latest'
    environment: 
      name: Azure Swarm
      resourceType: VirtualMachine
      tags: master
    strategy:
      runOnce:
        deploy:   
            steps:
            - bash:
                if [ $( /usr/bin/docker service ls -f name=Web --format '{{.Name}}' ) == 'Web' ]; then
                  /usr/bin/docker pull micmunger/8cld202:web;
                  /usr/bin/docker service update --image micmunger/8cld202:web Web;
                else
                  /usr/bin/docker service create --name Web -p 80:80 --constraint 'node.hostname==Master-MySQL' micmunger/8cld202:web;
                fi;
              name: startWeb
            - bash:
                if [ $( /usr/bin/docker service ls -f name=MySQL_DB --format '{{.Name}}' ) == 'MySQL_DB' ]; then
                  /usr/bin/docker pull micmunger/8cld202:mysql_db;
                  /usr/bin/docker service update --image micmunger/8cld202:mysql_db MySQL_DB;
                else
                  /usr/bin/docker service create --name MySQL_DB -p 3306:3306 --constraint 'node.hostname==Master-MySQL' micmunger/8cld202:mysql_db;
                fi;
              name: startMySQL_DB
            - bash:
                if [ $( /usr/bin/docker service ls -f name=MySQL_API --format '{{.Name}}' ) == 'MySQL_API' ]; then
                  /usr/bin/docker pull micmunger/8cld202:mysql_api;
                  /usr/bin/docker service update --image micmunger/8cld202:mysql_api MySQL_API;
                else
                  /usr/bin/docker service create --name MySQL_API -p 5000:5000 --constraint 'node.hostname==Master-MySQL' micmunger/8cld202:mysql_api;
                fi;
              name: startMySQL_API
  
  - deployment: workerSwarmStart
    displayName: Worker Swarm Services Start
    dependsOn: workerSwarmInit
    pool:
      vmImage: 'ubuntu-latest'
    environment: 
      name: Azure Swarm
      resourceType: VirtualMachine
      tags: master
    strategy:
      runOnce:
        deploy:   
            steps:
            - bash:
                if [ $( /usr/bin/docker service ls -f name=IoT_DB --format '{{.Name}}' ) == 'IoT_DB' ]; then
                  /usr/bin/docker pull micmunger/8cld202:iot_db;
                  /usr/bin/docker service update --image micmunger/8cld202:iot_db IoT_DB;
                else
                  /usr/bin/docker service create --name IoT_DB -p 6667:6667 -p 9091:9091 --constraint 'node.hostname==Master-MySQL' micmunger/8cld202:iot_db;
                fi;
              name: startIoT_DB
            - bash:
                if [ $( /usr/bin/docker service ls -f name=IoT_API --format '{{.Name}}' ) == 'IoT_API' ]; then
                  /usr/bin/docker pull micmunger/8cld202:iot_api;
                  /usr/bin/docker service update --image micmunger/8cld202:iot_api IoT_API;
                else
                  /usr/bin/docker service create --name IoT_API -p 5011:5000 --constraint 'node.hostname==Master-MySQL' micmunger/8cld202:iot_api;
                fi;
              name: startIoT_API

- stage: k8s
  displayName: Deploy with Kubernetes
  jobs:
  - job: start_cluster
    displayName: start cluster
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: AzurePowerShell@5
        inputs:
          azureSubscription: 'connection k8s'
          ScriptType: 'InlineScript'
          Inline: 'az aks start --resource-group k8s --name k8s'
          preferredAzurePowerShellVersion: 'LatestVersion'

  - job: k8s_job
    displayName: deployment k8s
    dependsOn: start_cluster
    pool:
      vmImage: ubuntu-latest
    steps:
    
      - task: Kubernetes@1
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'connection k8s'
          azureResourceGroup: 'k8s'
          kubernetesCluster: 'k8s'
          command: 'delete'
          arguments: '--all deployment'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'
        
      - task: Kubernetes@1
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'connection k8s'
          azureResourceGroup: 'k8s'
          kubernetesCluster: 'k8s'
          command: 'apply'
          arguments: '-f ./azure_manifest.yaml'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'
          